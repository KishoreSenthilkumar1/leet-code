
typedef struct StackNode{
    int data;
    struct StackNode* node;
}StackNode;

typedef struct Stack{
    StackNode* top;
}Stack;

bool StackIsEmpty(Stack* uStack)
{
    return (uStack->top==NULL);
}

Stack* CreateStack()
{
    Stack* stack =(Stack*)malloc(sizeof(Stack));
    stack->top=NULL;
    return stack;
}

void StackPush(Stack* uStack, int uData){

    StackNode* uStackNode= (StackNode*)malloc(sizeof(StackNode));
    uStackNode->data = uData;
    uStackNode->node = uStack->top;
    uStack->top = uStackNode;
}

int StackPop(Stack* uStack)
{
    if(StackIsEmpty(uStack)){
        return -1;
    }
    StackNode* uStackNode = uStack->top;
    uStack->top= uStackNode->node;
    int data =  uStackNode->data;
    free(uStackNode);
    return data;
}

int StackPeek(Stack* uStack) {
    if (StackIsEmpty(uStack)) {
        return -1; 
    }
    return uStack->top->data;
}


typedef struct {
    Stack* uStack1;
    Stack* uStack2;
} MyQueue;


MyQueue* myQueueCreate() {
    MyQueue* Que=(MyQueue*)malloc(sizeof(MyQueue));
    Que->uStack1 = CreateStack();
    Que->uStack2 = CreateStack();
    return Que;
}

void myQueuePush(MyQueue* obj, int x) {
    StackPush(obj->uStack1, x);
}

int myQueuePop(MyQueue* obj)
{
    int data;
    if(!StackIsEmpty(obj->uStack2))
    {
        return StackPop(obj->uStack2);
    }
    while(!StackIsEmpty(obj->uStack1))
    {
        StackPush(obj->uStack2, StackPop(obj->uStack1));
    }
    return StackPop(obj->uStack2);
}

int myQueuePeek(MyQueue* obj)
{
    int data;
    if(!StackIsEmpty(obj->uStack2))
    {
        return StackPeek(obj->uStack2);
    }
    while(!StackIsEmpty(obj->uStack1))
    {
        StackPush(obj->uStack2, StackPop(obj->uStack1));
    }
    return StackPeek(obj->uStack2);
}

bool myQueueEmpty(MyQueue* obj) {
    return (StackIsEmpty(obj->uStack1) && StackIsEmpty(obj->uStack2));
    
}

void myQueueFree(MyQueue* obj) {

    while(!StackIsEmpty(obj->uStack1)){
        StackPop(obj->uStack1);
    }
    
    while(!StackIsEmpty(obj->uStack2)){
        StackPop(obj->uStack2);
    }
    free(obj->uStack1);
    free(obj->uStack2);
    free(obj);
}

/**
 * Your MyQueue struct will be instantiated and called as such:
 * MyQueue* obj = myQueueCreate();
 * myQueuePush(obj, x);
 
 * int param_2 = myQueuePop(obj);
 
 * int param_3 = myQueuePeek(obj);
 
 * bool param_4 = myQueueEmpty(obj);
 
 * myQueueFree(obj);
*/
