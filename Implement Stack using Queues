struct node {
    int val;
    struct node* prev;
};

struct node* newnode(int val,struct node* prev) {
    struct node* new = malloc(sizeof(struct node));
    new->val = val;
    new->prev = prev;
    return new;
}

typedef struct {
    struct node* top;
} MyStack;


MyStack* myStackCreate() {
    MyStack* obj = malloc(sizeof(MyStack));
    obj->top = NULL;
    return obj;
}

void myStackPush(MyStack* obj, int x) {
    obj->top = newnode(x,obj->top);
}

int myStackPop(MyStack* obj) {
    int res = obj->top->val;
    obj->top = obj->top->prev;
    return res;
}

int myStackTop(MyStack* obj) {
    return obj->top->val;
}

bool myStackEmpty(MyStack* obj) {
    return obj->top == NULL;
}

void myStackFree(MyStack* obj) {
    free(obj->top);
    free(obj);
}


/**
 * Your MyStack struct will be instantiated and called as such:
 * MyStack* obj = myStackCreate();
 * myStackPush(obj, x);
 
 * int param_2 = myStackPop(obj);
 
 * int param_3 = myStackTop(obj);
 
 * bool param_4 = myStackEmpty(obj);
 
 * myStackFree(obj);
*/
